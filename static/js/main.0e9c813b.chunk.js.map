{"version":3,"sources":["public/img/logo.png","public/img/rocket.png","public/img/communication.png","public/img/light.webp","public/img/inter.gif","public/img/rotation.gif","public/img/light.gif","public/img/SquareBlack.png","public/img/earth.png","public/img/satellite.png","public/img/ground.jpg","components/Background/index.js","components/Header/index.js","components/Intro/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rocket","require","communication","light","mars","inter","rotation","lightGIF","Background","className","src","alt","logo","spaceapps_logo","Header","onClick","window","location","earth","satellite","Intro","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,6GCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,kCCA3CD,EAAOC,QAAU,IAA0B,yC,kCCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,wECGrCC,G,iBAASC,EAAQ,KACjBC,EAAgBD,EAAQ,IACxBE,EAAQF,EAAQ,IAChBG,EAAOH,EAAQ,GACfI,EAAQJ,EAAQ,IAChBK,EAAWL,EAAQ,IACnBM,EAAWN,EAAQ,IA2EVO,EAzEI,kBACjB,yBAAKC,UAAU,cACb,yBAAKA,UAAU,SACb,yBAAKC,IAAKV,EAAQW,IAAI,KACtB,yBAAKF,UAAU,cACb,4DACA,sZAWJ,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,kDACA,2TAIF,yBAAKC,IAAKH,EAAUI,IAAI,MAE1B,yBAAKF,UAAU,QACf,yBAAKA,UAAU,QAAQC,IAAKP,EAAOQ,IAAI,KACvC,yBAAKF,UAAU,QACf,yBAAKA,UAAU,SACb,yBAAKC,IAAKR,EAAeS,IAAI,KAC7B,yBAAKF,UAAU,cACb,gEACA,oOAMJ,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,uEACA,kVAIF,yBAAKC,IAAKN,EAAMO,IAAI,MAEtB,yBAAKF,UAAU,QACf,yBAAKA,UAAU,SACb,yBAAKC,IAAKL,EAAOM,IAAI,KACrB,yBAAKF,UAAU,cACb,mEACA,gWAKJ,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,iDACA,kOAIF,yBAAKA,UAAU,MAAMC,IAAKJ,EAAUK,IAAI,QC5ExCC,G,MAAOX,EAAQ,IACfY,EAAiBZ,EAAQ,IAchBa,EAZA,kBACb,yBAAKL,UAAU,UACb,yBAAKA,UAAU,kBACb,yBAAKC,IAAKE,EAAMD,IAAI,KACpB,yBAAKF,UAAU,gBAAf,cAEF,4BAAQM,QAAS,kBAAIC,OAAOC,SAAW,uGACrC,yBAAKP,IAAKG,EAAgBF,IAAI,QCV9BP,G,MAAOH,EAAQ,IACfiB,EAAQjB,EAAQ,IAChBkB,EAAYlB,EAAQ,IAeXmB,GAdAnB,EAAQ,IAET,kBACZ,yBAAKQ,UAAU,SACb,yBAAKA,UAAU,eAAf,qBACA,yBAAKA,UAAU,kBAAf,6MACA,yBAAKA,UAAU,mBACb,yBAAKC,IAAKQ,EAAOP,IAAI,KACrB,yBAAKD,IAAKS,EAAWR,IAAI,KACzB,yBAAKD,IAAKN,EAAMO,IAAI,SCGXU,MAVf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDca,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e9c813b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.674de013.png\";","module.exports = __webpack_public_path__ + \"static/media/rocket.ca5111d2.png\";","module.exports = __webpack_public_path__ + \"static/media/communication.e1f61e21.png\";","module.exports = __webpack_public_path__ + \"static/media/light.593b5776.webp\";","module.exports = __webpack_public_path__ + \"static/media/inter.d3103156.gif\";","module.exports = __webpack_public_path__ + \"static/media/rotation.70d49678.gif\";","module.exports = __webpack_public_path__ + \"static/media/light.a75632e8.gif\";","module.exports = __webpack_public_path__ + \"static/media/SquareBlack.411ec2c3.png\";","module.exports = __webpack_public_path__ + \"static/media/earth.54231c06.png\";","module.exports = __webpack_public_path__ + \"static/media/satellite.5dae729e.png\";","module.exports = __webpack_public_path__ + \"static/media/ground.1fdf6597.jpg\";","import React from 'react';\nimport './index.css'\n\nconst rocket = require('../../public/img/rocket.png')\nconst communication = require('../../public/img/communication.png')\nconst light = require('../../public/img/light.webp')\nconst mars = require('../../public/img/logo.png')\nconst inter = require('../../public/img/inter.gif')\nconst rotation = require('../../public/img/rotation.gif')\nconst lightGIF = require('../../public/img/light.gif')\n\nconst Background = () => (\n  <div className=\"background\">\n    <div className=\"right\">\n      <img src={rocket} alt=\"\"></img>\n      <div className=\"Right-card\">\n        <strong> Between Earth and Mars:</strong> \n        <div>\n        Conquering Mars has always been a dream for humanity. \n        We have dreamed of the moment when the first individual \n        steps on the surface of the red planet.\n        The distance between the earth and the sun is approximately\n         8 light minutes. And the distance between Mars and the sun\n          is 11 light minutes. So the minimum duration that may \n          exist between Earth and Mars is 4 light minutes.\n        </div>\n      </div>\n    </div>\n    <div className=\"bar\"></div>\n    <div className=\"left\">\n      <div className=\"Left-card\">\n        <strong>What is light?</strong> \n        <div>\n        Light is nothing more than a bunch of photons that behave like waves. And these waves have a property known as wavelength, this length determines whether the light belongs to radio waves, microwaves, infrared or the light that we can observe. You can see this in the diagram below.\n        </div>\n      </div>\n      <img src={lightGIF} alt=\"\"></img>\n    </div>\n    <div className=\"bar\"></div>\n    <img className=\"light\" src={light} alt=\"\"></img>\n    <div className=\"bar\"></div>\n    <div className=\"right\">\n      <img src={communication} alt=\"\"></img>\n      <div className=\"Right-card\">\n        <strong>Communication, how we do it?</strong> \n        <div>\n        Now that we know what light is, you should know that we use light to send messages. These messages are encrypted in 0's and 1's.\n        Thanks to this we send messages that move at the speed of light.\n        </div>\n      </div>\n    </div>\n    <div className=\"bar\"></div>\n    <div className=\"left\">\n      <div className=\"Left-card\">\n        <strong>What's going on with this and Mars?</strong> \n        <div>\n        Well, as we mentioned before, the minimum distance between Mars and the earth is 4 light minutes, that is, in the best of cases, a message would take 4 minutes from here to Mars. But on average a message takes 20 minutes round trip. Now imagine surfing the internet if it took 20 minutes per instruction?\n        </div>\n      </div>\n      <img src={mars} alt=\"\"></img>\n    </div>\n    <div className=\"bar\"></div>\n    <div className=\"right\">\n      <img src={inter} alt=\"\"></img>\n      <div className=\"Right-card\">\n        <strong>Other problems with this method</strong> \n        <div>\n        As we said, we communicate using light, but the light waves add and subtract from each other, we call this interference, (as shown in the GIF). In space many light waves are emitted, the planets emit light, the sun emits light, etc. Then there is interference with the messages, so you cannot send very long messages.\n        </div>\n      </div>\n    </div>\n    <div className=\"bar\"></div>\n    <div className=\"left\">\n      <div className=\"Left-card\">\n        <strong>More problems</strong> \n        <div>\n        Both the earth and Mars rotate on their own axis (rotation). This means that at times of day our emitters are not pointing towards Mars, or our receivers on Mars are not looking towards Earth.\n        </div>\n      </div>\n      <img className=\"rot\" src={rotation} alt=\"\"></img>\n    </div>\n  </div>\n)\n\nexport default Background","import React from 'react';\nimport './index.css'\n\nconst logo = require('../../public/img/logo.png')\nconst spaceapps_logo = require('../../public/img/SquareBlack.png')\n\nconst Header = () => (\n  <div className=\"header\">\n    <div className=\"header_section\">\n      <img src={logo} alt=\"\"></img>\n      <div className=\"header_title\">ADVENTURE</div>\n    </div>\n    <button onClick={()=>window.location = \"https://2020.spaceappschallenge.org/challenges/connect/can-you-hear-me-now/teams/adventure/project\"}>\n      <img src={spaceapps_logo} alt=\"\"></img>\n    </button>\n  </div>\n)\n\nexport default Header","import React from 'react';\nimport './index.css'\n\nconst mars = require('../../public/img/logo.png')\nconst earth = require('../../public/img/earth.png')\nconst satellite = require('../../public/img/satellite.png')\nconst ground = require('../../public/img/ground.jpg')\n\nconst Intro = () => (\n  <div className=\"intro\">\n    <div className=\"intro_title\">Adventure Mission</div>\n    <div className=\"intro_subtitle\">Human missions to Mars are moving from the realm of science fiction to science fact. Adventure will be a mission to improve the way we communicate with astronaouts on Mars based on quantum entanglement</div>\n    <div className=\"intro_animation\">\n      <img src={earth} alt=\"\"></img>\n      <img src={satellite} alt=\"\"></img>\n      <img src={mars} alt=\"\"></img>\n    </div>\n  </div>\n)\n\nexport default Intro","import React from 'react';\nimport './App.css';\nimport Background from './components/Background';\n\nimport Header from './components/Header';\nimport Intro from './components/Intro';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Intro/>\n      <Background/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}